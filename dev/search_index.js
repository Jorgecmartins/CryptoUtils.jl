var documenterSearchIndex = {"docs":
[{"location":"#CryptoUtils.jl-1","page":"CryptoUtils.jl","title":"CryptoUtils.jl","text":"","category":"section"},{"location":"#","page":"CryptoUtils.jl","title":"CryptoUtils.jl","text":"","category":"page"},{"location":"#","page":"CryptoUtils.jl","title":"CryptoUtils.jl","text":"Modules = [CryptoUtils]","category":"page"},{"location":"#CryptoUtils.b2n-Tuple{String}","page":"CryptoUtils.jl","title":"CryptoUtils.b2n","text":"b2n(str::String) -> BigInt\n\nConverts a byte-string to a number, converting the string from base 256 to base 10.\n\njulia> b2n(\"Hello world!\")\n22405534230753963835153736737\n\n\n\n\n\n","category":"method"},{"location":"#CryptoUtils.factor_with_ed-Tuple{Integer,Integer,Integer}","page":"CryptoUtils.jl","title":"CryptoUtils.factor_with_ed","text":"factor_with_ed(n::Integer, e::Integer, d::Integer) -> (Integer, Integer)\n\nFactors n = p*q given (e, d) s.t. e*d = 1 mod phi(n) Stinson page 204 - algorithm 5.10\n\n\n\n\n\n","category":"method"},{"location":"#CryptoUtils.find_quadratic_non_residue-Tuple{Integer}","page":"CryptoUtils.jl","title":"CryptoUtils.find_quadratic_non_residue","text":"find_quadratic_non_residue(p::Integer)\n\nReturn a random number R which has no square root mod p, i.e., x^2 == R mod p has no solutions.\n\n\n\n\n\n","category":"method"},{"location":"#CryptoUtils.get_first_primes-Tuple{Integer}","page":"CryptoUtils.jl","title":"CryptoUtils.get_first_primes","text":"get_first_primes(k::Integer) -> Collection\n\nOutput the first k prime numbers\n\njulia> julia> get_first_primes(10)\n10-element Array{Int64,1}:\n  2\n  3\n  5\n  7\n 11\n 13\n 17\n 19\n 23\n 29\n\n\n\n\n\n","category":"method"},{"location":"#CryptoUtils.hoc_sqrt-Tuple{Integer,Integer}","page":"CryptoUtils.jl","title":"CryptoUtils.hoc_sqrt","text":"hoc_sqrt(a::Integer, p::Integer)\n\nAlgorithm from Handbook of cryptography, Koblitz pp 48-49. Finds a solution to x^2 == a mod p.\n\nIt assumes such solution exists.\n\nRunning time highly depends on |alpha|, assuming p-1 = 2^alpha * s, for an odd s.\n\n\n\n\n\n","category":"method"},{"location":"#CryptoUtils.is_quadratic_residue-Tuple{Integer,Integer}","page":"CryptoUtils.jl","title":"CryptoUtils.is_quadratic_residue","text":"is_quadratic_residue(a::Integer, p::Integer) -> Bool\n\nReturn true or false depending on wheter a is a quadratic residue mod p.\n\nThat is, it checks if x^2 == a mod p has solutions.\n\n\n\n\n\n","category":"method"},{"location":"#CryptoUtils.jacobi-Tuple{Integer,Integer}","page":"CryptoUtils.jl","title":"CryptoUtils.jacobi","text":"jacobi(n::Integer, k::Integer)\n\nReturn the Jacobi symbol of n, k.\n\nk should be an odd number.\n\n\n\n\n\n","category":"method"},{"location":"#CryptoUtils.legendre-Tuple{Integer,Integer}","page":"CryptoUtils.jl","title":"CryptoUtils.legendre","text":"legendre(a::Integer, p::Integer)\n\nReturn the Legendre symbol of (a, p).\n\np should be an odd prime number.\n\n\n\n\n\n","category":"method"},{"location":"#CryptoUtils.n2b-Tuple{Integer}","page":"CryptoUtils.jl","title":"CryptoUtils.n2b","text":"n2b(n::Integer) -> String\n\nConverts a number to its bytes representation, effectively writing the number in base 256, and returning the corresponding bytes.\n\njulia> n2b(22405534230753963835153736737)\n\"Hello world!\"\n\n\n\n\n\n","category":"method"},{"location":"#CryptoUtils.random_prime-Tuple{Integer}","page":"CryptoUtils.jl","title":"CryptoUtils.random_prime","text":"random_prime(bitsize::Integer) -> BigInt\n\nReturn a random prime with bitsize bits.\n\njulia> random_prime(42)\n2458636110727\n\n\n\n\n\n","category":"method"},{"location":"#CryptoUtils.safe_prime-Tuple{Integer}","page":"CryptoUtils.jl","title":"CryptoUtils.safe_prime","text":"safe_prime(bitsize::Integer) -> BigInt\n\nReturn a random safe-prime q of the form q = 2 * p + 1 where p is also a prime number. The returning prime number has bitsize bits.\n\njulia> safe_prime(10)\n1439\n\n\n\n\n\n","category":"method"},{"location":"#CryptoUtils.sqrt_mod_prime-Tuple{Integer,Integer}","page":"CryptoUtils.jl","title":"CryptoUtils.sqrt_mod_prime","text":"sqrt_mod_prime(a::Integer, p::Integer) -> Integer\n\nSolves x^2 == a mod p and returns one of the square roots r. The other root is p - r. If there are no solutions, throws an exception.\n\njulia> sqrt_mod_prime(33^2, 73)\n33\n\n\n\n\n\n","category":"method"},{"location":"#CryptoUtils.tonelli_shanks-Tuple{Integer,Integer}","page":"CryptoUtils.jl","title":"CryptoUtils.tonelli_shanks","text":"tonelli_shanks(a::Integer, p::Integer)\n\nImplements the Tonelli Shanks algorithm for computing square roots modulo a prime number.\n\nIt assumes such square roots exist.\n\n\n\n\n\n","category":"method"},{"location":"#CryptoUtils.tower_two_prime-Tuple{Integer,Integer}","page":"CryptoUtils.jl","title":"CryptoUtils.tower_two_prime","text":"tower_two_prime(bitsize::Integer, tower_len::Integer) -> BigInt\n\nReturn a random prime of the form 2^towerlen * q + 1 with bitsize bits and where q is also a prime.\n\njulia> tower_two_prime(22, 6)\n2362433\n\n\n\n\n\n","category":"method"}]
}
